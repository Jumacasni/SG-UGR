 
/// La clase fachada del modelo
/**
 * Usaremos una clase derivada de la clase Scene de Three.js para llevar el control de la escena y de todo lo que ocurre en ella.
 */

class MyScene extends THREE.Scene {
  constructor (unRenderer) {
    super();
    
    // Se añade a la gui los controles para manipular los elementos de esta clase
    this.createGUI ();
    
    // Construimos los distinos elementos que tendremos en la escena
    
    // Todo elemento que se desee sea tenido en cuenta en el renderizado de la escena debe pertenecer a esta. Bien como hijo de la escena (this en esta clase) o como hijo de un elemento que ya esté en la escena.
    // Tras crear cada elemento se añadirá a la escena con   this.add(variable)
    this.createLights ();
    
    // Tendremos una cámara con un control de movimiento con el ratón
    this.createCamera (unRenderer);  
    
    // Y unos ejes. Imprescindibles para orientarnos sobre dónde están las cosas
    this.axis = new THREE.AxesHelper (5);
    this.add(this.axis);

    this.anchoCuboRojo = 1;
    this.alturaCuboRojo = 1;
    this.profundidadCuboRojo = 1;

    this.anchoCuboVerde = 1;
    this.alturaCuboVerde = 1;
    this.profundidadCuboVerde = 1;

    this.anchoCuboAzul = 1;
    this.alturaCuboAzul = 1;
    this.profundidadCuboAzul = 1;

    this.radioCirculo = 1;
    this.anchuraBarrido = 2.5;

    // CREACIÓN CUBO ROJO
    var geometry = new THREE.BoxGeometry( this.anchoCuboRojo, this.alturaCuboRojo, this.profundidadCuboRojo);
    var material = new THREE.MeshBasicMaterial( {color: 0xff0000} );
    this.cuborojo = new THREE.Mesh( geometry, material );
    this.cuborojo.geometry.applyMatrix( new THREE.Matrix4().makeTranslation(0, -this.alturaCuboRojo/2, 0));
    this.cuborojo.scale.y = 3;

    this.objetocuborojo = new THREE.Object3D();

    // CREACIÓN FIGURA VERDE
    var geometry = new THREE.BoxGeometry( this.anchoCuboVerde, this.alturaCuboVerde, this.profundidadCuboVerde);
    var material = new THREE.MeshBasicMaterial( {color: 0x00ff00} );
    this.cuboverde = new THREE.Mesh( geometry, material );
    this.cuboverde.geometry.applyMatrix( new THREE.Matrix4().makeTranslation(0, 0, this.profundidadCuboVerde/2));
    this.cuboverde.scale.z = this.guiControls.longitud;
    this.cuboverde.position.z += this.profundidadCuboRojo/2;
    this.cuboverde.position.y = -this.cuborojo.scale.y;

    // CREACIÓN CUBO AZUL
    var geometry = new THREE.BoxGeometry( this.anchoCuboAzul, this.alturaCuboAzul, this.profundidadCuboAzul);
    var material = new THREE.MeshBasicMaterial( {color: 0x0000ff} );
    this.cuboazul = new THREE.Mesh( geometry, material );
    this.cuboazul.geometry.applyMatrix( new THREE.Matrix4().makeTranslation(0, -this.alturaCuboAzul/2, 0));
    this.cuboazul.scale.y = 3;
    this.cuboazul.rotation.z = this.guiControls.giroAzul;
    this.cuboazul.position.z = this.profundidadCuboAzul/2 + this.profundidadCuboRojo/2 + this.guiControls.longitud;
    this.cuboazul.position.y = -this.cuborojo.scale.y;

    // CREACIÓN FIGURA COMPLETA
    this.figura = new THREE.Mesh();
    this.figura.add(this.cuborojo);
    this.figura.add(this.cuboverde);
    this.figura.add(this.cuboazul);
    this.figura.rotation.z = this.guiControls.giro;
    this.add(this.figura);

    // ANIMACIÓN CUBO AZUL
    var origen = {rotacion: Math.PI/2};
    var destino = {rotacion: -Math.PI/2};
    var that = this;
    var animacionpendulo2 = new TWEEN.Tween(origen).to(destino,2000);
    animacionpendulo2.easing(TWEEN.Easing.Quadratic.InOut);
    animacionpendulo2.onUpdate(function(){
        that.cuboazul.rotation.z = this.rotacion;
    });
    animacionpendulo2.onComplete(function(){
    	//animacionpendulo2.start();
    });
    

	var origen = {rotacion: -Math.PI/2};
	var destino = {rotacion: Math.PI/2};
	var that = this;
	var animacionpendulo = new TWEEN.Tween(origen).to(destino,2000);
	animacionpendulo.easing(TWEEN.Easing.Quadratic.InOut);
	animacionpendulo.onUpdate(function(){
		that.cuboazul.rotation.z = this.rotacion;
	});
	animacionpendulo.onComplete(function(){
		animacionpendulo2.start();
	});

	animacionpendulo2.chain(animacionpendulo);
	animacionpendulo.start();
  }

  createCamera (unRenderer) {
    // Para crear una cámara le indicamos
    //   El ángulo del campo de visión en grados sexagesimales
    //   La razón de aspecto ancho/alto
    //   Los planos de recorte cercano y lejano
    this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);
    // También se indica dónde se coloca
    this.camera.position.set (20, 10, 20);
    // Y hacia dónde mira
    var look = new THREE.Vector3 (0,0,0);
    this.camera.lookAt(look);
    this.add (this.camera);
    
    // Para el control de cámara usamos una clase que ya tiene implementado los movimientos de órbita
    this.cameraControl = new THREE.TrackballControls (this.camera, unRenderer);
    // Se configuran las velocidades de los movimientos
    this.cameraControl.rotateSpeed = 5;
    this.cameraControl.zoomSpeed = -2;
    this.cameraControl.panSpeed = 0.5;
    // Debe orbitar con respecto al punto de mira de la cámara
    this.cameraControl.target = look;
  }
  
  createGUI () {
    // Se definen los controles que se modificarán desde la GUI
    // En este caso la intensidad de la luz y si se muestran o no los ejes
    this.guiControls = new function() {
      // En el contexto de una función   this   alude a la función
      this.lightIntensity = 0.5;
      this.longitud = 1;
      this.giro = 0;
    }

    // Se crea una sección para los controles de esta clase
    var folder = gui.addFolder ('Luz y Ejes');
    
    // Se le añade un control para la intensidad de la luz
    folder.add (this.guiControls, 'lightIntensity', 0, 1, 0.1).name('Intensidad de la Luz : ');

    var folder_examen = gui.addFolder ('Examen');

    folder_examen.add (this.guiControls, 'longitud', 1, 5, 0.1).name('Longitud: ');

    folder_examen.add (this.guiControls, 'giro', -Math.PI/2, Math.PI/2, 0.1).name('Giro figura completa: ');
  }
  
  createLights () {
    // Se crea una luz ambiental, evita que se vean complentamente negras las zonas donde no incide de manera directa una fuente de luz
    // La luz ambiental solo tiene un color y una intensidad
    // Se declara como   var   y va a ser una variable local a este método
    //    se hace así puesto que no va a ser accedida desde otros métodos
    var ambientLight = new THREE.AmbientLight(0xccddee, 0.35);
    // La añadimos a la escena
    this.add (ambientLight);
    
    // Se crea una luz focal que va a ser la luz principal de la escena
    // La luz focal, además tiene una posición, y un punto de mira
    // Si no se le da punto de mira, apuntará al (0,0,0) en coordenadas del mundo
    // En este caso se declara como   this.atributo   para que sea un atributo accesible desde otros métodos.
    this.spotLight = new THREE.SpotLight( 0xffffff, this.guiControls.lightIntensity );
    this.spotLight.position.set( 60, 60, 40 );
    this.add (this.spotLight);
  }
  
  getCamera () {
    // En principio se devuelve la única cámara que tenemos
    // Si hubiera varias cámaras, este método decidiría qué cámara devuelve cada vez que es consultado
    return this.camera;
  }
  
  setCameraAspect (ratio) {
    this.camera.aspect = ratio;
    this.camera.updateProjectionMatrix();
  }
  
  update () {
    // Se actualizan los elementos de la escena para cada frame
    // Se actualiza la intensidad de la luz con lo que haya indicado el usuario en la gui
    this.spotLight.intensity = this.guiControls.lightIntensity;
    
    // Se muestran o no los ejes según lo que idique la GUI
    this.axis.visible = this.guiControls.axisOnOff;
    
    // Se actualiza la posición de la cámara según su controlador
    this.cameraControl.update();

    //
    this.cuboverde.scale.z = this.guiControls.longitud;

    this.cuboazul.position.z = this.profundidadCuboAzul/2 + this.profundidadCuboRojo/2 + this.guiControls.longitud;

    this.figura.rotation.z = this.guiControls.giro;
    
    TWEEN.update();
  }
}


